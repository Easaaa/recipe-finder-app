{"version":3,"sources":["components/recipe/recipe.component.jsx","components/search-box/search-box.component.jsx","components/search-filter/search-filter.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Recipe","_ref","title","calories","image","ingredients","react_default","a","createElement","className","src","alt","parseInt","map","ingredient","index","key","text","SearchBox","search","updateSearch","placeholder","type","value","onChange","SearchFilter","filterLogic","onClick","App","_useState","useState","_useState2","Object","slicedToArray","recipes","setRecipes","_useState3","_useState4","setSearch","_useState5","_useState6","query","setQuery","useEffect","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","concat","sent","json","hits","stop","apply","this","arguments","getRecipes","onSubmit","e","preventDefault","search_box_component_SearchBox","target","search_filter_component_SearchFilter","classList","toggle","li","contains","innerText","recipe","recipe_component_Recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45cdb258.chunk.js","sourcesContent":["import React from 'react';\nimport './recipe.styles.css';\n\nexport const Recipe = ({ title, calories, image, ingredients }) => (\n  <div className=\"recipe\">\n    <h1 className=\"recipe_title\">{title}</h1>\n    <div className=\"image_div\">\n      <img className=\"image\" src={image} alt=\"\" />\n    </div>\n    <p className=\"calories\">Calories: {parseInt(calories)} Kcal</p>\n    <h2>Ingredients:</h2>\n    <ul className=\"ingredients\">\n      {ingredients.map((ingredient, index) => (\n        <li className=\"ingredient\" key={index}>\n          <i className=\"fas fa-caret-right\" /> {ingredient.text}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ search, updateSearch, placeholder }) => (\n  <div>\n    <input\n      type=\"text\"\n      className=\"search-bar\"\n      value={search}\n      onChange={updateSearch}\n      placeholder={placeholder}\n    />\n    <button type=\"submit\" className=\"search-button\">\n      <i className=\"fas fa-search\" />\n    </button>\n  </div>\n);\n","import React from 'react';\nimport './search-filter.styles.css';\n\nexport const SearchFilter = ({ filterLogic }) => (\n  <div>\n    <ul className=\"filters\">\n      <li className=\"filter\" onClick={filterLogic}>\n        Chicken\n      </li>\n      <li className=\"filter\" onClick={filterLogic}>\n        Sushi\n      </li>\n      <li className=\"filter\" onClick={filterLogic}>\n        Bread\n      </li>\n      <li className=\"filter\" onClick={filterLogic}>\n        Risotto\n      </li>\n      <li className=\"filter\" onClick={filterLogic}>\n        Pasta\n      </li>\n      <li className=\"filter\" onClick={filterLogic}>\n        Soup\n      </li>\n      <li className=\"filter\" onClick={filterLogic}>\n        Dessert\n      </li>\n      <li className=\"filter\" onClick={filterLogic}>\n        Salad\n      </li>\n      <li className=\"filter\" onClick={filterLogic}>\n        Eggs\n      </li>\n      <li className=\"filter\" onClick={filterLogic}>\n        Pizza\n      </li>\n      <li className=\"filter\" onClick={filterLogic}>\n        Fish\n      </li>\n      <li className=\"filter\" onClick={filterLogic}>\n        Grill\n      </li>\n    </ul>\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Recipe } from './components/recipe/recipe.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { SearchFilter } from './components/search-filter/search-filter.component';\nimport './App.css';\n\nconst App = () => {\n  const APP_ID = 'c2b98cb7';\n  const APP_KEY = 'f0869bf01680a8472affea83a20507fa';\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    const getRecipes = async () => {\n      const response = await fetch(\n        `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n      );\n      const data = await response.json();\n      setRecipes(data.hits);\n    };\n    getRecipes();\n  }, [query]);\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n  };\n\n  const filterLogic = e => {\n    e.target.classList.toggle('active-filter');\n    const li = e.target;\n    if (li.classList.contains('active-filter')) {\n      setQuery(li.innerText);\n    } else {\n      setQuery('');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1 className=\"title\">Strange Recipes Finder</h1>\n        <form onSubmit={getSearch} className=\"search-form\">\n          <SearchBox updateSearch={updateSearch} placeholder=\"Search recipe\" />\n        </form>\n        <div className=\"search-filter\">\n          <SearchFilter filterLogic={filterLogic} />\n        </div>\n      </header>\n      <div className=\"recipes\">\n        {recipes.map((recipe, index) => (\n          <Recipe\n            key={index}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}